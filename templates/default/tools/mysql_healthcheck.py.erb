#!/usr/bin/python

# Version: 0.3

import MySQLdb
import logging
import time
import sys
from daemon import runner
from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer

# config
LISTEN_PORT = <%= @listen_port %>
MAX_SLAVE_DELAY = <%= @max_slave_delay %>
MYSQL_SOCKET = "<%= @socket %>"
MYSQL_USER = "<%= @user %>"
MYSQL_PASS = "<%= @password %>"
LOGFILE = "<%= @logfile %>"
PIDFILE = "<%= @pidfile %>"

def checkMysql(last_state):
	state = 1
	try:
		conn = MySQLdb.connect (unix_socket = MYSQL_SOCKET, user = MYSQL_USER, passwd = MYSQL_PASS)
		
		# Check for slave information
		cursor = conn.cursor(cursorclass=MySQLdb.cursors.DictCursor)
		cursor.execute ("show slave status")
		row = cursor.fetchone()
		if cursor.rowcount>0:
			sbm = row['Seconds_Behind_Master'] or 0
			sir = row['Slave_IO_Running']
			sqr = row['Slave_SQL_Running']
			logger.info("Seconds behind: %d, io: %s, sql: %s" % (sbm, sir, sqr))
			if sbm > MAX_SLAVE_DELAY or sir != 'Yes' or sqr != 'Yes':
				state=0
		else:
			logger.info("No slave information!")
			state=0
		cursor.close()
		
		# Check for read only parameter (0=master)
		cursor = conn.cursor(cursorclass=MySQLdb.cursors.DictCursor)
		cursor.execute ("select @@read_only as ro")
		row = cursor.fetchone()
		logger.info("Read only state: %d" % (row['ro'],))
		if row['ro'] == 0:
			state=1
		cursor.close()

		# Kill connections if status is in error state
		if state == 0 and last_state == 1:
			cursor = conn.cursor(cursorclass=MySQLdb.cursors.DictCursor)
			cursor.execute ("select id from information_schema.processlist where user <> '<%= Array( @keep_users ).join("' and user <> '") %>'")
			rows = cursor.fetchall()
			cursor.close()
			for row in rows:
				try:
					cursor = conn.cursor(cursorclass=MySQLdb.cursors.DictCursor)
					cursor.execute ("kill " + str(row["id"]))
					cursor.close()
				except:
					logger.info("Cannot kill thread:" + str(row["id"]))

		conn.close()

	except:
			state=0
			logger.info("Error: %s" % (sys.exc_info()[1],))

	return state

class mySqlHandler(BaseHTTPRequestHandler):

	last_state = 1

	def do_GET(self):
		if checkMysql(mySqlHandler.last_state):
			logger.info("%s - Mysql is OK!" % (self.client_address[0],) )
			self.send_response(200)
			self.send_header('Content-type','text/html')
			self.end_headers()
			self.wfile.write("Mysql is OK!\n")
			mySqlHandler.last_state = 1
		else:
			logger.info("%s - Mysql is in ERROR state!" % (self.client_address[0],) )
			self.send_response(503)
			self.send_header('Content-type','text/html')
			self.end_headers()
			self.wfile.write("Mysql is in ERROR state!\n")
			mySqlHandler.last_state = 0
		return

class App():
	def __init__(self):
		self.stdin_path = '/dev/null'
		self.stdout_path = '/dev/null'
		self.stderr_path = '/dev/null'
		#self.stdout_path = '/dev/tty'
		#self.stderr_path = '/dev/tty'
		self.pidfile_path =  PIDFILE
		self.pidfile_timeout = 5

	def run(self):
		try:
			server = HTTPServer(('', LISTEN_PORT), mySqlHandler)
			logger.info('Started httpserver on port %d ' % (LISTEN_PORT,))
			server.serve_forever()
		except:
			logger.info('shutting down the web server')
			server.socket.close()

app = App()
logger = logging.getLogger("MysqlCheck")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler = logging.FileHandler(LOGFILE)
handler.setFormatter(formatter)
logger.addHandler(handler)

try:
	daemon_runner = runner.DaemonRunner(app)
	daemon_runner.daemon_context.files_preserve=[handler.stream]
	daemon_runner.do_action()
except:
	print "Not running"
	sys.exit(1)
