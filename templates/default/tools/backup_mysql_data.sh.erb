#!/bin/bash

###
# Generated by Chef for [<%= node[:fqdn] %>]
# Environment: <%= node.chef_environment %>
###

set -o pipefail

ulimit -n 16000

declare RET=1
declare MYSQL="<%= @base %>/current/bin/mysql -S <%= @base %>/var/mysqld.sock"
declare SSH="/usr/bin/ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <%= @base %>/tools/backup_rsa -l <%= @backup_user %> -p <%= @backup_port %> <%= @backup_host %>"

<% if @backup_encrypt %>
declare ENCRYPT="openssl enc -aes-256-cbc -pass file:<%= @base %>/tools/backup_key"
<% else %>
declare ENCRYPT="cat -"
<% end %>
# Decrypt encrpyted backup:
# openssl enc -aes-256-cbc -d -pass file:backup_key < encrypted.backup > UNENCRYPTED_FILE

function finish {
  if [ "$RET" -ne 0 ]; then
    /bin/touch /tmp/mysql-backup-<%= @port %>-failed
  else
    /bin/rm -f /tmp/mysql-backup-<%= @port %>-failed
  fi
}
trap finish EXIT

declare READONLY=0
declare ISMASTER=0
declare USER='--user=root'
declare PASSWORD=""

# Access
if [ -f "/root/.my.cnf" ]; then
  USER_TMP="--user="$(sed -nr 's/user\ ?=\ ?(.+)/\1/p' /root/.my.cnf)
  if [ "$USER_TMP" != "--user=" ]; then USER=$USER_TMP; fi
  PASSWORD_TMP="--password="$(sed -nr 's/password\ ?=\ ?(.+)/\1/p' /root/.my.cnf)
  if [ "$PASSWORD_TMP" != "--password=" ]; then PASSWORD=$PASSWORD_TMP; fi
fi

if [ -f "<%= @base %>/tools/backup.cnf" ]; then
  USER_TMP="--user="$(sed -nr 's/user\ ?=\ ?(.+)/\1/p' <%= @base %>/tools/backup.cnf)
  if [ "$USER_TMP" != "--user=" ]; then USER=$USER_TMP; fi
  PASSWORD_TMP="--password="$(sed -nr 's/password\ ?=\ ?(.+)/\1/p' <%= @base %>/tools/backup.cnf)
  if [ "$PASSWORD_TMP" != "--password=" ]; then PASSWORD=$PASSWORD_TMP; fi
fi

# Detect replication
READONLY=$($MYSQL -N -e "select @@read_only" $USER $PASSWORD)
ISMASTER=$($MYSQL -N -e "show slave hosts" $USER $PASSWORD | /usr/bin/wc -l)

if [ "<%= @backup_force %>" == "false" ] && [ "$READONLY" == "0" ] && [ "$ISMASTER" != "0" ] ; then
  echo "$(date) Not passive master! Exiting."
  RET=0
  exit 0
fi

echo "$(date) Starting mysql backup"

# create destination directory.
if ! $SSH "mkdir -p <%= @backup_path %>/$(hostname -f)"; then
  echo "$(date) Cannot create remote directory!"
  exit 1
fi


# Do the backup
declare BACKUP_FILE=""
declare BACKUP_TOOL=""


if [ -x "<%= @base %>/current/bin/mariadb-backup" ]; then
  BACKUP_TOOL="<%= @base %>/current/bin/mariadb-backup --defaults-file=<%= @base %>/etc/my.cnf --use-memory=1G --tmpdir=<%= @base %>/tmp $USER $PASSWORD --defaults-group=server --backup --stream=xbstream "
  BACKUP_FILE="$(hostname -f)/$(hostname -f).$(date +%Y%m%d-%H%M%S).xbstream.tar.gz"
elif [ -x "/usr/bin/innobackupex" ]; then
  BACKUP_TOOL="/usr/bin/innobackupex --defaults-file=<%= @base %>/etc/my.cnf --use-memory=1G --safe-slave-backup --slave-info --tmpdir=<%= @base %>/tmp $USER $PASSWORD --defaults-group=server --stream=tar ./ "
  BACKUP_FILE="$(hostname -f)/$(hostname -f).$(date +%Y%m%d-%H%M%S).xtrabackup.tar.gz"
fi

if [ ! -z "$BACKUP_TOOL" ]; then
  if ! $BACKUP_TOOL | pigz -6 -p <%= (node["cpu"]["total"]/2.to_f).ceil %> | $ENCRYPT | $SSH "cat - > <%= @backup_path %>/$BACKUP_FILE.inprogress"; then
    echo "$(date) Backup failed!"
    exit 1
  fi

  if ! $SSH "mv <%= @backup_path %>/$BACKUP_FILE.inprogress <%= @backup_path %>/$BACKUP_FILE"; then
    echo "$(date) Cannot rename inprogress file!"
    exit 1
  fi
else
  echo "$(date) innobackupex/mariabackup not found!"
  exit 1
fi

# update backup index
if ! $SSH "echo $BACKUP_FILE >> <%= @backup_path %>/<%= @name %>.index"; then
  echo "$(date) Backup index update failed!"
  exit 1
fi

RET=0
echo "$(date) Finished mysql backup"
